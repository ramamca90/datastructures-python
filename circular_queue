#https://leetcode.com/problems/design-circular-queue/submissions/

class MyCircularQueue:
	def __init__(self, k: int):
		self.q = [None] * k
		self.size = 0
		self.head = None
		self.tail = None

	def enQueue(self, value: int) -> bool:
		if self.isFull():
			return False

		if self.head is None:
			self.head = 0

		if self.tail is None:
			self.tail = 0
		else:
			self.tail = (self.tail + 1) % len(self.q)

		self.q[self.tail] = value
		self.size += 1
		return True

	def deQueue(self) -> bool:
		if self.isEmpty():
			return False

		if self.head == self.tail:
			self.head = self.tail = None
		else:
			self.head = (self.head + 1) % len(self.q)

		self.size -= 1
		return True

	def Front(self) -> int:
		return -1 if self.head is None else self.q[self.head]

	def Rear(self) -> int:
		return -1 if self.tail is None else self.q[self.tail]

	def isEmpty(self) -> bool:
		return self.size == 0

	def isFull(self) -> bool:
		return self.size == len(self.q)
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
